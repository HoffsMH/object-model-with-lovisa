#!/usr/bin/env ruby


# If I want to show C source code:
#
# require 'yard'
# prydoc_paths = Gem.find_latest_files('pry-doc')
#
# if !prydoc_paths || prydoc_paths.empty?
#   raise "You need to `gem install pry-doc`"
# end
#
# prydoc_path  = prydoc_paths.find { |path| File.basename(path) == 'pry-doc' }
# path         = prydoc_path + '/core_docs_22'
# registry     = YARD::Registry.load_yardoc path
# puts registry['Class#new'].source
#
# # >> VALUE
# # >> rb_class_new_instance(int argc, const VALUE *argv, VALUE klass)
# # >> {
# # >>     VALUE obj;
# # >>
# # >>     obj = rb_obj_alloc(klass);
# # >>     rb_obj_call_init(obj, argc, argv);
# # >>
# # >>     return obj;
# # >> }


$LOAD_PATH.unshift File.expand_path('../lib', __dir__)
require 'spelunk/cli'
cli = Spelunk::CLI.new($stdin, $stdout, $stderr, ARGV)
cleanups = []
tp = TracePoint.new do |tp|
  begin
    event = {
      event:         tp.event,
      path:          File.expand_path(tp.path),
      lineno:        tp.lineno,
      method_id:     tp.method_id,
      defined_class: tp.defined_class,
      binding:       tp.binding.eval('binding'),
      object:        tp.self,
    }
    begin
      event[:return_value] = tp.return_value
    rescue
    end
    result = cli.event(event)
    exit if result == :exit
  rescue Exception
    cleanups.each &:call
    raise
  end
end

$stdin.raw!
cleanups.unshift -> { $stdin.cooked!  }

tp.enable
cleanups.unshift -> { tp.disable }

begin
  require File.expand_path(cli.filename)
ensure
  cleanups.each &:call
end
